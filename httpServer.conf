##
# WEB SERVER CONFIGURATION
##

#
# <ConfigName>single space<ConfigValue>
# Please do not surround <ConfigValue> with any characters
# like double quote ("<ConfigValue>" is invalid).
#

#
# DocumentRootStatic: The directory out of which you will
# serve your documents.
# This is the value set as 4D's "Default HTML Root" path, so
# files under this directory is returned by 4D HTTP server
# without any restriction when one is requested via URI.
# For files that restrictions are needed, place them under 
# "DocumentRootDynamic" directory and return them via 4D code.
#
# The directory is relative to Folder("/PACKAGE";*).
# For example, specifying "WebFolder" for this value
# results the Folder("/PACKAGE/WebFolder").
#
DocumentRootStatic WebFolder

#
# DocumentRootDynamic: The directory out of which you will
# serve your documents.
# The difference between "DocumentRootStatic" and 
# "DocumentRootDynamic" are:
# Files placed in static folder will be returned without 
# any restriction by 4D web server when it is requested.
# On the other hand, since 4D Web server does not know 
# the presence of dynamic folder and its contents, to send
# those files as the response to the request, you must
# explicitly load and send them via 4D code.
# That means you have a full control of sending them or not.
# Additionally, when you want to embed data coming from 4D,
# you will use dynamic folder and send template file via
# 4D code since it triggers embedding data.
#
# The directory is relative to Folder("/PACKAGE";*).
# For example, specifying "WebFolderDynamic" for this value
# results the Folder("/PACKAGE/WebFolderDynamic").
#
DocumentRootDynamic WebFolderDynamic

#
# ListenIPAddress: By default, 4D web server listen to
# requests coming through all IP addresses bound to the
# server machine. Change this to listen on specific IP
# address.
# 
# ListenIPAddress 192.168.100.100

#
# ListenPort: The port number 4D web server opens to
# listen to.
#
ListenPort 80

#
# ListenSSLPort: The port number 4D web server opens
# for secure connection.
#
ListenSSLPort 443

#
# CharacterSet: Character set that the 4D Web Server
# should use to communicate with browsers connecting
# to the database.
#
CharacterSet UTF-8

#
# HSTSMode: When enabled, 4D web server tells web browser
# whether the connection must be done under secure connetion
# by adding specific response header.
# Note that when you enable HSTS mode, secure connection
# must be configred by installing SSL keys otherwise connection
# could not be established.
#
HSTSMode off

#
# HSTSMaxAge: When HSTS mode is enabled, the max-age is
# used to tell web browser how long it should remember
# the status of the site's HSTS mode.
# The value is expressed in seconds.
# The default value is 63072000 sec = 2 years.
# Setting 0 second to this value may clear the browser's
# memory of the site's HSTS mode.
#
HSTSMaxAge 63072000

#
# MaxRequestSize: Limits maximum size (in bytes) of
# incoming POST request. When a request exceeds this limit,
# 4D web server refuses it.
#
MaxRequestSize 2000000

##
# 4D WEB PROCESS
##

#
# MaxConcurrentProcess: Defines upper limit of concurrent
# web processes. When this number (minus 1) is reached,
# 4D web server will return  HTTP status 503 (Service 
# unavailable) to all new requests.
# Possible values are between 10 and 32,000
#
MaxConcurrentProcess 100

##
# 4D WEB SESSION MANAGEMENT
##

#
# AutoSessionManagement: Enables or disables the session
# management mode. When it is enabled, 4D will bind web
# session with a 4D process. As a result, 4D's process
# creation stage will be removed, thus the performance
# will increase.
#
# Security Note (WARNING)
# To bind web session with 4D process, 4D uses session ID
# generated by 4D and it is stored in cookie. 
# This session ID will never change until the web process is
# killed or timed out.
# If your web application includes login function,
# and use session ID stored in cookie to manage session,
# you must not rely on this session ID generated by 4D.
# To avoid "Session Fixation Attack", you must
# change session ID between before and after login process.
# Don't forget to issue custom session ID and use it
# to manage login status.
#
AutoSessionManagement on

#
# SessionProcessTimeout: Set the life duration of the inactive
# web process associated with web session.
# The value is expressed in minutes. The default value
# is 480 minutes (8 hours).
#
SessionProcessTimeout 480

#
# SessionCookieTimeout: Set the life duration of the inactive
# web session. This value is set in cookie as expire value.
# The value is expressed in minutes. The default value
# is 480 minutes (8 hours).
#
SessionCookieTimeout 480

#
# MaxSession: Limits the number of simultaneous sessions.
# When the number of session is reached to the max, and 
# needs to create new one, oldest session will be closed
# after On Web Close Process database method is called.
#
MaxSession 100

#
# SessionCookieName: This value is used to change cookie's
# name attribute value. Default value is "4DSID"
#
# SessionCookieName SESSIONID

#
# SessionIPAddressValidation: When enabled, 4D Web server
# checks the IP address of each request containing a session
# cookie and rejects it if this address does not match the
# IP address used to create the cookie. According to the 4D
# Reference, this mechanism is used for security reason.
# Mostly "Session Fixation Attack" is concerned.
# However, to against this attack, IP validation
# approach may not be the best way. Most common way could be
# changing session identifier after login. But 4D does not
# provide the way to do it for automatic session management id.
# So I recommend you to diable this setting and provide your
# own session identifier and use it to manage authentication
# status.
#
# You may think if enabling this has no side effect, it could
# be additional layer of the security. But it has. Imagine
# a user uses laptop or smartphone and connect to the system 
# via wireless, if a wifi station or cellular station changes
# for some reason, IP address could also change. In this case,
# if enabled this setting, the user will lost the session.
#
SessionIPAddressValidation off

#
# Settings "Session Cookie Domain" and "Session Cookie Path"
# are not included in this cofiguration. Under my survey,
# on security point of view, session cookie domain should not
# be defined. And defining session cookie path has no effect to
# security. If you would like to define them, you should
# spend some time to look into it.
#

##
# WEB LOG
##

#
# AccessLog: Enable or disable recording of web requests.
# Possible values are as follow:
#     off: Do not record
#     CLF: Record in CLF format
#     DLF: Record in DLF format
#     ELF: Record in ELF format
#     WLF: Record in WLF format
#
# Caution
# When you choose ELF/WLF format, you MUST specify which
# field should be recorded beforehand in the database
# setting dialog of 4D. Otherwise log file will not be
# generated.
#
AccessLog off

#
# DebugLog: Enable or disable recording of web requests and
# responses. It is usufull for debuging issues related to
# web server.
# Possible values are as follow:
#     off: Do not record
#     Without body: Only header parts are recorded.
#     With response body: Headers and response bodies are recorded.
#     With request body: Headers and request bodies are recorded.
#     With all body: Headers, request and response bodies are recorded.
# 
DebugLog off
